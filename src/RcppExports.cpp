// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calc_rates
arma::vec calc_rates(const arma::vec& la, int r, int np);
RcppExport SEXP _abundolism_calc_rates(SEXP laSEXP, SEXP rSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type la(laSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_rates(la, r, np));
    return rcpp_result_gen;
END_RCPP
}
// ewise
arma::vec ewise(const arma::vec& g, const arma::vec& m_prop);
RcppExport SEXP _abundolism_ewise(SEXP gSEXP, SEXP m_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_prop(m_propSEXP);
    rcpp_result_gen = Rcpp::wrap(ewise(g, m_prop));
    return rcpp_result_gen;
END_RCPP
}
// sfull_test
double sfull_test(int np);
RcppExport SEXP _abundolism_sfull_test(SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    rcpp_result_gen = Rcpp::wrap(sfull_test(np));
    return rcpp_result_gen;
END_RCPP
}
// rexp_test
double rexp_test(double rate);
RcppExport SEXP _abundolism_rexp_test(SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(rexp_test(rate));
    return rcpp_result_gen;
END_RCPP
}
// bias_sample
int bias_sample(std::vector<double> weights);
RcppExport SEXP _abundolism_bias_sample(SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(bias_sample(weights));
    return rcpp_result_gen;
END_RCPP
}
// check_probs
std::vector<double> check_probs();
RcppExport SEXP _abundolism_check_probs() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(check_probs());
    return rcpp_result_gen;
END_RCPP
}
// sim_spec_abund
arma::mat sim_spec_abund(const arma::vec& la, const arma::vec& mu, const arma::vec& g, const arma::vec& m_prop, const arma::vec& nu, const arma::vec& tau, const arma::vec& xi, int np, int nstep);
RcppExport SEXP _abundolism_sim_spec_abund(SEXP laSEXP, SEXP muSEXP, SEXP gSEXP, SEXP m_propSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP xiSEXP, SEXP npSEXP, SEXP nstepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type la(laSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_prop(m_propSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    Rcpp::traits::input_parameter< int >::type nstep(nstepSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_spec_abund(la, mu, g, m_prop, nu, tau, xi, np, nstep));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abundolism_calc_rates", (DL_FUNC) &_abundolism_calc_rates, 3},
    {"_abundolism_ewise", (DL_FUNC) &_abundolism_ewise, 2},
    {"_abundolism_sfull_test", (DL_FUNC) &_abundolism_sfull_test, 1},
    {"_abundolism_rexp_test", (DL_FUNC) &_abundolism_rexp_test, 1},
    {"_abundolism_bias_sample", (DL_FUNC) &_abundolism_bias_sample, 1},
    {"_abundolism_check_probs", (DL_FUNC) &_abundolism_check_probs, 0},
    {"_abundolism_sim_spec_abund", (DL_FUNC) &_abundolism_sim_spec_abund, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_abundolism(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
